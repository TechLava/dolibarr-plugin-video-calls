// Define usable constants

const params = new URLSearchParams(window.location.search);
const userId = USER;

var localStream;
var callObjs = {};

var localVideo;
var remoteVideo;
var text;
var users;

const peer = new Peer(userId, {
	key: '17b9864c-f92b-4882-bacc-0a1bf22d3f8d',
	debug: 1
});
var peers = {};
const callList = {};
var Call;

peer.on('call', function(call) {
	Call = call;

	if( !localStream && confirm('You have a new call from '+call.metadata.userName) ){
	    navigator.mediaDevices
	        .getUserMedia({ audio: true, video: true })
	        .then(stream => {
	        	stream.customAttr = 'shit';

	            localStream = stream;
	            localVideo.srcObject = stream;
	            
	            call.answer(localStream);

	            peers[call.peer] = peer.connect(call.peer);
	            peers[call.peer].on('data', handleData);
	        })
	        .catch(err => {
	            console.log('Join Call; An error ocurred: '+err);
	        });

        call.on('error', err => {
            console.log('Call error: '+err);
        });

        call.on('stream', stream => {
        	if(callList[call.peer]){
        		return;
        	}

            var x = document.createElement('video');
            x.height = 200;
            x.width = 300;
            x.controls = true;
            x.srcObject = stream;
            x.autoplay = true;

            x.classList.toggle('w-100');
            x.classList.toggle('rounded');

            var d = document.createElement('div');
            d.id = call.peer;
            d.classList.add('col');
            d.classList.add('text-center');
        	//d.classList.toggle('bg-white');
          	d.classList.toggle('shadow-sm');

            d.style.minWidth = '300px';

            var h = document.createElement('strong');
            h.innerHTML = call.metadata.userName + ' (Host)';
            h.style.color = 'white';

            d.appendChild(x);
            d.appendChild(h);

            remoteVideo.appendChild(d);
            callList[call.peer] = call;
        });

        call.on('close', ()=>{
        	$('#'+call.peer).remove();
        });

		$('#create_call').modal('hide');
	} else {
		call.close();
	}
});

peer.on('connection', function(conn){
	peers[conn.peer] = conn;

	peers[conn.peer].on('data', handleData);
});

$(document).ready(()=>{

	localVideo = document.getElementById('local-video');
	remoteVideo = document.getElementById('remote-video');
	text = document.getElementById('txt');

	text.oninput = function() {
		text.style.height = "";
		text.style.height = text.scrollHeight + "px"
	};

	/* Select recepients */

	users = document.getElementById('users');

	for (var i = 0; i < users.children.length; i++) {
	    var f = users.children[i];
	    if( f.value == userId ){
	        f.disabled = true;
	    }
	}

	updateTime();
});

var handleData = function(data){

	if( data.type="chat" ){
		$('#chats').append($('\
			<div class="text-left mb-3">\
				<div class="text-left rounded p-2 bg-light text-secondary d-inline-block" style="font-size: small; max-width: 80%;">\
					' + data.data + '<br/>\
					<i class="mt-2 d-inline-block"><a href="javascript:void(0)">'+ data.from +'</a> @ <span class="times" data-value="'+ (data.time-0) +'">' + timeago(data.time) + '</span></i>\
				</div>\
			</div>'));

		const t = $('#unread-counter');
		t.html(Number(t.html()||0)+1);
	}
};

/* Host a call function */

var createCall = function(button){

	userName = $('#name').val() || 'anonymous';

    button.classList.toggle('d-none');
    button.nextElementSibling.classList.toggle('d-none');

    navigator.mediaDevices
        .getUserMedia({ audio: true, video: true })
        .then(stream => {
            localStream = stream;
            localVideo.srcObject = stream;

            for (var i = 0; i < users.children.length; i++) {
                var f = users.children[i];
                if( f.selected ){
                    const call = peer.call(f.value, localStream, {
                    	metadata: {
                    		userName: userName
                    	}
                    });

                    call.on('error', err => {
                        console.log('Call error: '+err);
                    });

                    call.on('stream', stream => {
                    	if(callList[call.peer]){
                    		return;
                    	}

                        var x = document.createElement('video');
                        x.height = 200;
                        x.width = 300;
                        x.controls = true;
                        x.srcObject = stream;
                        x.autoplay = true;

                        x.classList.toggle('w-100');
                    	x.classList.toggle('rounded');

                        var d = document.createElement('div');
                        d.id = call.peer;
                        d.classList.add('col');
                        d.classList.add('text-center');
                    	//d.classList.toggle('bg-white');
                      	d.classList.toggle('shadow-sm');

                        d.style.minWidth = '300px';

                        var h = document.createElement('strong');
                        h.innerHTML = call.peer;
                        h.style.color = 'white';

                        d.appendChild(x);
                        d.appendChild(h);

                        remoteVideo.appendChild(d);
                        callList[call.peer] = call;
                    });

                    call.on('close', () => {
                    	$('#'+call.peer).remove();
                    });
                }
            }
    
		    button.classList.toggle('d-none');
		    button.nextElementSibling.classList.toggle('d-none');
		    $('#create_call').modal('hide');
        })
        .catch(err => {
            console.log('An error ocurred: '+err);
        });
};

var mute = function( type, element ){
	switch(type) {
		case 1:
			var x = localStream.getAudioTracks()[0];
			x.enabled = !x.enabled;

			element.children[0].classList.replace(!x.enabled ? 'fa-microphone' : 'fa-microphone-slash', !x.enabled ? 'fa-microphone-slash' : 'fa-microphone');
			break
		case 2:
			var x = localStream.getVideoTracks()[0];
			x.enabled = !x.enabled;
			
			element.children[0].classList.toggle('text-danger');
			break
	}
};

var sendMessage = function(){
	if( text.value ){
		let chat = {
			type: 'chat',
			time: (new Date()) - 0,
			data: text.value,
			from: userName
		};

		text.value = '';

		$('#chats').append($('\
			<div class="text-right mb-3">\
				<div class="text-left rounded p-2 bg-light text-secondary d-inline-block" style="font-size: small; max-width: 80%;">\
					' + chat.data + '<br/>\
					<i class="mt-2 d-inline-block"><a href="javascript:void(0)">Me</a> @ <span class="times" data-value="'+ (chat.time-0) +'">' + timeago(chat.time) + '</span></i>\
				</div>\
			</div>'));

		for( x in peers ){
			peers[x].send(chat);
		}
	}
};

var closeCall = function(){
	if( confirm('Do you really wish to end this call') ){
		if( Call ){
			Call.close();
		} else {
			for( h in callList ){
				callList[h].close();
			}
		}
		
		localVideo.srcObject.getTracks().forEach(track => track.stop());
		$('#create_call').modal();
	}
};

var timeago = function(previous) {
	var msPerMinute = 60 * 1000;
	var msPerHour = msPerMinute * 60;
	var msPerDay = msPerHour * 24;
	var msPerMonth = msPerDay * 30;
	var msPerYear = msPerDay * 365;

	var elapsed = (new Date()) - previous;

	if (elapsed < msPerMinute) {
		return Math.round(elapsed/1000) + ' secs ago';   
	}

	else if (elapsed < msPerHour) {
		return Math.round(elapsed/msPerMinute) + ' mins ago';   
	}

	else if (elapsed < msPerDay ) {
		return Math.round(elapsed/msPerHour ) + ' hrs ago';   
	}

	else if (elapsed < msPerMonth) {
		return Math.round(elapsed/msPerDay) + ' days ago';   
	}

	else if (elapsed < msPerYear) {
		return Math.round(elapsed/msPerMonth) + ' months ago';   
	}

	else {
		return Math.round(elapsed/msPerYear ) + ' years ago';   
	}
};

var updateTime = function(){
	$('.times').each(function(i, x){
		x.innerHTML = timeago(x.getAttribute('data-value'));
	});

	setTimeout(updateTime, 20000);
};

window.addEventListener('beforeunload', function (e) {
  e.preventDefault();
  e.returnValue = '';
});

window.addEventListener('unload', function (e) {
  console.log(e);
});